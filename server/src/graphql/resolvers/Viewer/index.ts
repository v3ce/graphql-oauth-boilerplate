import crypto from 'crypto';

import { IResolvers } from 'apollo-server-express';
import { Request, Response } from 'express';

import { LogInArgs, LogInViaThirdPartyResponse } from './types';

import { GitHub, Google } from '../../../lib/api';
import { Database, LoginType, User, Viewer } from '../../../lib/types';

// authentication data stored with `localStorage` or `sessionStorage` are
// vulnerable to cross-site scriptin (XSS) attacks

const cookieOptions = {
  httpOnly: true, // not accessible with client JS and are immune to XSS attacks
  sameSite: true, // ensure the cookie is not sent with cross-site request
  signed: true, // ensure the cookie is not tampered by signing with HMAC
  secure: process.env.NODE_ENV !== 'dev', // can only be sent securely via HTTPS
};

const logInViaThirdParty = async (
  code: string,
  token: string, // generated by crypto
  db: Database,
  res: Response,
  loginType: LoginType
): Promise<User> => {
  let loginResponse: LogInViaThirdPartyResponse;

  if (loginType === LoginType.GitHub) {
    const { githubUser } = await GitHub.logIn(code);

    if (!githubUser) {
      throw new Error('GitHub login error');
    }

    loginResponse = {
      _id: githubUser._id,
      name: githubUser.name,
      avatar: githubUser.avatar_url,
      contact: githubUser.email,
    };
  } else {
    const { googleUser } = await Google.logIn(code);

    if (!googleUser) {
      throw new Error('Google login error');
    }

    // Names/Photos/Emails List
    const userNamesList = googleUser.names && googleUser.names.length ? googleUser.names : null;
    const userPhotosList = googleUser.photos && googleUser.photos.length ? googleUser.photos : null;
    const userEmailsList =
      googleUser.emailAddresses && googleUser.emailAddresses.length
        ? googleUser.emailAddresses
        : null;

    // Name/Id/Avatar/Email
    const userName = userNamesList && userNamesList[0].displayName;
    const userId = userNamesList && userNamesList[0].metadata?.source?.id;
    const userAvatar = userPhotosList && userPhotosList[0].url;
    const userEmail = userEmailsList && userEmailsList[0].value;

    if (!userId || !userName || !userAvatar || !userEmail) {
      throw new Error('Google login error');
    }

    loginResponse = {
      _id: userId,
      name: userName,
      avatar: userAvatar,
      contact: userEmail,
    };
  }

  const { _id, name, avatar, contact } = loginResponse;

  const updateResult = await db.users.findOneAndUpdate(
    { _id },
    {
      $set: {
        token,
        name,
        avatar,
        contact,
      },
    },
    { returnOriginal: false }
  );

  const updatedUser: User | undefined = updateResult.value;

  if (updatedUser) {
    res.cookie('viewer', _id, {
      ...cookieOptions,
      maxAge: 365 * 24 * 60 * 60 * 1000,
    });
    return updatedUser;
  }

  const insertResult = await db.users.insertOne({
    _id,
    token,
    name,
    avatar,
    contact,
  });

  res.cookie('viewer', _id, {
    ...cookieOptions,
    maxAge: 365 * 24 * 60 * 60 * 1000,
  });

  return insertResult.ops[0];
};

const loginViaCookie = async (
  token: string,
  db: Database,
  req: Request,
  res: Response
): Promise<User | undefined> => {
  const updateResult = await db.users.findOneAndUpdate(
    { _id: req.signedCookies.viewer },
    { $set: { token } },
    { returnOriginal: false }
  );
  const updatedUser: User | undefined = updateResult.value;

  if (!updatedUser) {
    res.clearCookie('viewer', cookieOptions);
  }

  return updatedUser;
};

export const viewerResolvers: IResolvers = {
  Query: {
    authUrl: (_root: undefined, { loginType }: { loginType: LoginType }): string => {
      try {
        if (loginType === LoginType.GitHub) {
          return GitHub.authUrl;
        }
        return Google.authUrl;
      } catch (error) {
        throw new Error(`Failed to query auth url: ${error}`);
      }
    },
  },
  Mutation: {
    logIn: async (
      _root: undefined,
      { input }: LogInArgs,
      { db, req, res }: { db: Database; req: Request; res: Response }
    ): Promise<Viewer> => {
      try {
        const token = crypto.randomBytes(16).toString('hex');
        const code = input?.code;
        const loginType = input?.loginType;

        const user: User | undefined =
          code && loginType
            ? await logInViaThirdParty(code, token, db, res, loginType)
            : await loginViaCookie(token, db, req, res);

        if (!user) {
          return { didRequest: true };
        }

        return {
          _id: user._id,
          token: user.token,
          avatar: user.avatar,
          didRequest: true,
        };
      } catch (error) {
        throw new Error(`Failed to log in: ${error}`);
      }
    },
    logOut: (_root: undefined, _args: undefined, { res }: { res: Response }): Viewer => {
      try {
        res.clearCookie('viewer', cookieOptions);
        return { didRequest: true };
      } catch (error) {
        throw new Error(`Failed to log out: ${error}`);
      }
    },
  },
  Viewer: {
    id: (viewer: Viewer): string | undefined => {
      return viewer._id;
    },
  },
};
